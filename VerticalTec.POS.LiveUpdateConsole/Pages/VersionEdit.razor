@page "/versionedit"
@page "/versionedit/{batchId}/{brandId:int}"

@using System.Data
@using System.Collections
@using VerticalTec.POS.LiveUpdate
@using VerticalTec.POS.LiveUpdateConsole.Models
@using VerticalTec.POS.Database
@using VerticalTec.POS.Utils
@using VerticalTec.POS.LiveUpdateConsole.Services
@using CurrieTechnologies.Razor.SweetAlert2
@using System.Text;

@inject IDatabase DbContext
@inject SweetAlertService Swal
@inject LiveUpdateDbContext LiveUpdateContext;
@inject NavigationManager NavigationManager;
@inject RepoService RepoService;

@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>สร้างเวอร์ชั่น</h3>

@if (_brands.Count == 0)
{
    <p><em>กำลังโหลด...</em></p>
}
else
{
    <EditForm Model="@_deployVersion" OnValidSubmit="@(async() => await SaveAsync())">
        <DataAnnotationsValidator />
        <div class="form-group col-md-4">
            <div class="row">
                <div class="col">
                    <label>แบรนด์</label>
                    <select class="form-control" @onchange="@OnBrandChanged">
                        @foreach (var brand in _brands)
                        {
                            @if (brand.BrandId == @BrandId)
                            {
                                <option selected value="@brand.BrandId">@brand.BrandName</option>
                            }
                            else
                            {
                                <option value="@brand.BrandId">@brand.BrandName</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <div class="col">
                @if (_shopCats.Count > 0)
                {
                    <label>เลือกประเภทร้าน</label>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="chkAllShopCat" @onchange="@OnCheckAllShopCat" />
                                <label for="chkAllShopCat" class="custom-control-label">เลือกทั้งหมด</label>
                            </div>
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush" style="height:300px; width:500px; overflow:auto;">
                        @foreach (var shopCat in _shopCats)
                        {
                            <li class="list-group-item">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="@shopCat.ShopCateId" checked="@(shopCat.Selected)" @onchange="(e) => OnShopCatCheck(shopCat, e)" />
                                    <label for="@shopCat.ShopCateId" class="custom-control-label">@shopCat.ShopCateName</label>
                                </div>
                            </li>
                        }
                    </ul>
                }
            </div>
            <div class="col">
                <label>เลือกสาขา</label>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="chkAllShop" @onchange="@OnCheckAllShop" />
                            <label for="chkAllShop" class="custom-control-label">เลือกทั้งหมด</label>
                        </div>
                    </li>
                </ul>
                <ul class="list-group list-group-flush" style="height:300px; width:500px; overflow:auto;">
                    @foreach (var shop in _shops)
                    {
                        <li class="list-group-item">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="@shop.ShopId" @bind="@shop.Selected" />
                                <label for="@shop.ShopId" class="custom-control-label">@shop.ShopCode : @shop.ShopName</label>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>

        @*<div class="form-group col-md-4">
                <label>เลือกประเภทโปรแกรม</label>
                <select class="form-control" @bind="@_deployVersion.ProgramId">
                    @foreach (var programType in _deployVersion.ProgramTypes)
                    {
                        var programId = programType.ProgramTypeId;
                        var programName = programType.ProgramName;
                        <option value="@programId">@programName</option>
                    }
                </select>
            </div>*@

        <div class="form-group col-md-4">
            <label>เวอร์ชั่น</label>
            <input type="text" class="form-control" @bind="@_deployVersion.ProgramVersion">
        </div>

        <div class="form-group col-md-4">
            <label>อัพโหลดไฟล์ (รองรับเฉพาะ .zip)</label>
            <DxUpload Name="file" na UploadUrl="@GetUploadUrl("api/Resource/UploadPatch")"
                      AllowMultiFileUpload="false"
                      ChunkSize="1000000"
                      AllowedFileExtensions="@(new List<string> { ".zip" })"
                      ShowFileList="false"
                      FileUploadStarted="OnStartUpload"
                      FileUploaded="OnFileUploaded"
                      FileUploadError="OnErrorUpload">
            </DxUpload>
        </div>

        @*<div class="form-group col-md-4">
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="chkAutoBackup" @bind="@_deployVersion.AutoBackup" />
                    <label for="chkAutoBackup" class="custom-control-label">แบ็คอัพอัตโนมัติหลังจากโหลดไฟล์สำเร็จ</label>
                </div>
            </div>*@

        <div class="form-group col-md-4">
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="chkActivateUpdate" checked="@(_deployVersion.BatchStatus == VersionDeployBatchStatus.Actived ? true : false)" @onchange="OnDeployStatusChanged" />
                <label for="chkActivateUpdate" class="custom-control-label">เปิดการอัพเดต</label>
            </div>
        </div>
        <ValidationSummary />

        <div class="form-row m-4">
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">ตกลง</button> &nbsp; <button type="button" @onclick="@Cancel" class="btn btn-secondary">ยกเลิก</button>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public string BatchId { get; set; }

    [Parameter]
    public int BrandId { get; set; }

    bool IsBusy { get; set; }
    private DeployVersion _deployVersion = new DeployVersion();

    List<BrandData> _brands = new List<BrandData>();
    List<ShopData> _allShops = new List<ShopData>();
    List<ShopData> _shops = new List<ShopData>();
    List<ShopCategory> _shopCats = new List<ShopCategory>();

    int _staffId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var staffId = authState.User.FindFirst(c => c.Type == "id")?.Value;

        _staffId = Convert.ToInt32(staffId);

        await LoadBrandAsync();
        await LoadVersionDeploy();

        RefreshShop();
        await LoadShopCategoryAsync();
    }

    void OnDeployStatusChanged(ChangeEventArgs e)
    {
        var val = Convert.ToBoolean(e.Value);
        if (val)
        {
            if (_deployVersion.BatchStatus == VersionDeployBatchStatus.InActivate)
                _deployVersion.BatchStatus = VersionDeployBatchStatus.Actived;
        }
        else
        {
            _deployVersion.BatchStatus = VersionDeployBatchStatus.InActivate;
        }
    }

    void OnBrandChanged(ChangeEventArgs e)
    {
        BrandId = Convert.ToInt32(e.Value);
        RefreshShop();
    }

    void RefreshShop()
    {
        if (BrandId > 0)
            _shops = _allShops.Where(s => s.BrandId == BrandId).ToList();
    }

    void OnCheckAllShop(ChangeEventArgs e)
    {
        if (!_shops.Any())
            return;

        SetCheckToShop(_shops, Convert.ToBoolean(e.Value));
    }

    void OnCheckAllShopCat(ChangeEventArgs e)
    {
        foreach (var shopCat in _shopCats)
        {
            shopCat.Selected = Convert.ToBoolean(e.Value);
        }

        RefreshCheckedShop();

        StateHasChanged();
    }

    void OnShopCatCheck(ShopCategory shopCat, ChangeEventArgs e)
    {
        shopCat.Selected = Convert.ToBoolean(e.Value);
        RefreshCheckedShop();
    }

    void RefreshCheckedShop()
    {
        var selectedShopCat = _shopCats.Where(s => s.Selected).Select(s => s.ShopCateId);
        var shops = _shops.Where(s => selectedShopCat.Contains(s.ShopCatId)).ToList();

        var isNoData = shops.Count == 0;
        SetCheckToShop(isNoData ? _shops : shops, !isNoData);
    }

    void SetCheckToShop(List<ShopData> shops, bool isCheck)
    {
        if (!shops.Any())
            return;

        foreach (var shop in _shops.Where(s => s.Selected).ToList())
        {
            shop.Selected = false;
        }

        foreach (var shop in shops)
        {
            shop.Selected = isCheck;
        }
    }

    void OnStartUpload(FileUploadEventArgs e)
    {
        IsBusy = true;
        StateHasChanged();
    }

    void OnErrorUpload(FileUploadErrorEventArgs e)
    {
        IsBusy = false;
        StateHasChanged();
    }

    void OnFileUploaded(FileUploadEventArgs e)
    {
        IsBusy = false;

        _deployVersion.FileUrl = GetUploadUrl($"Patch/{e.FileInfo.Name}");
        StateHasChanged();
    }

    string GetUploadUrl(string url)
    {
        return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }

    async Task SaveAsync()
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            System.Data.IDbTransaction sqlTransaction = conn.BeginTransaction();

            var versionDeploy = new VersionDeploy();
            var isUpdate = !string.IsNullOrWhiteSpace(BatchId);
            if (isUpdate)
            {
                versionDeploy.BatchId = BatchId;
            }
            else
            {
                versionDeploy.InsertDate = DateTime.Now;
            }
            versionDeploy.BrandId = BrandId;
            versionDeploy.BatchStatus = _deployVersion.BatchStatus;
            versionDeploy.ProgramId = ProgramTypes.Front;
            versionDeploy.ProgramName = _deployVersion.ProgramName;
            versionDeploy.ProgramVersion = _deployVersion.ProgramVersion;
            versionDeploy.FileUrl = _deployVersion.FileUrl;
            versionDeploy.AutoBackup = true;
            versionDeploy.InsertDate = _deployVersion.InsertDate == DateTime.MinValue ? DateTime.Now : _deployVersion.InsertDate;
            versionDeploy.UpdateDate = DateTime.Now;
            versionDeploy.CreateBy = _staffId;
            versionDeploy.UpdateBy = _staffId;

            var opsMsg = isUpdate ? "Update" : "Create";

            try
            {
                var cmd = DbContext.CreateCommand(conn);
                cmd = DbContext.CreateCommand(conn);
                cmd.Transaction = sqlTransaction;

                if (_deployVersion.BatchStatus == VersionDeployBatchStatus.Actived)
                {
                    cmd.CommandText = "update Version_Deploy set BatchStatus=0 where BrandID=@brandId and BatchStatus not in(2,99)";
                    cmd.Parameters.Add(DbContext.CreateParameter("@brandId", BrandId));
                    await DbContext.ExecuteNonQueryAsync(cmd);
                }
                await LiveUpdateContext.AddOrUpdateVersionDeploy(conn, versionDeploy, sqlTransaction);

                cmd.CommandText = "delete from Version_LiveUpdate where BatchID=@batchId";
                cmd.Parameters.Add(DbContext.CreateParameter("@batchId", BatchId));
                await DbContext.ExecuteNonQueryAsync(cmd);

                cmd.Parameters.Clear();
                cmd.CommandText = "select ShopID, ComputerID from computername where ComputerType=0 and Deleted=0";
                var dtComputers = new DataTable();
                using (var reader = await DbContext.ExecuteReaderAsync(cmd))
                {
                    dtComputers.Load(reader);
                }

                var selectedShops = _shops.Where(s => s.Selected).Select(s => s.ShopId).ToList();
                //StringBuilder stringBuilder = new StringBuilder("insert into Version_LiveUpdate(BatchID, ShopID, ComputerID, ProgramID, ProgramName, UpdateVersion, InsertDate, UpdateDate) values ");

                var dtLiveUpdate = new DataTable();
                cmd.CommandText = "select * from Version_LiveUpdate where 1=0";
                cmd.Parameters.Clear();
                using(var reader = await DbContext.ExecuteReaderAsync(cmd))
                {
                    dtLiveUpdate.Load(reader);
                }
                //List<string> rows = new List<string>();

                var computersShop = dtComputers.AsEnumerable().Where(r => selectedShops.Contains(r.GetValue<int>("ShopID")))
                    .Select(c => new { ShopId = c.GetValue<int>("ShopID"), ComputerId = c.GetValue<int>("ComputerID") }).ToList();

                foreach (var comp in computersShop)
                {
                    //rows.Add($"('{versionDeploy.BatchId}', {comp.ShopId}, {comp.ComputerId}, {(int)versionDeploy.ProgramId}, '{versionDeploy.ProgramName}', '{versionDeploy.ProgramVersion}', GETDATE(), GETDATE())");
                    var row = dtLiveUpdate.NewRow();
                    row["BatchID"] = versionDeploy.BatchId;
                    row["ShopID"] = comp.ShopId;
                    row["ComputerID"] = comp.ComputerId;
                    row["ProgramID"] = (int)versionDeploy.ProgramId;
                    row["ProgramName"] = versionDeploy.ProgramName;
                    row["UpdateVersion"] = versionDeploy.ProgramVersion;
                    row["FileReceiveStatus"] = 0;
                    row["BackupStatus"] = 0;
                    row["RollbackStatus"] = 0;
                    row["UpdateStatus"] = 0;
                    row["SyncStatus"] = 0;
                    row["ReadyToUpdate"] = 0;
                    row["InsertDate"] = DateTime.Now;
                    row["UpdateDate"] = DateTime.Now;
                    dtLiveUpdate.Rows.Add(row);
                }

                if (dtLiveUpdate.Rows.Count > 0)
                {
                    // stringBuilder.Append(string.Join(",", rows));
                    // stringBuilder.Append(";");
                    // cmd.CommandText = stringBuilder.ToString();
                    // await DbContext.ExecuteNonQueryAsync(cmd);

                    using (var bulkCopy = new System.Data.SqlClient.SqlBulkCopy((System.Data.SqlClient.SqlConnection) conn, 
                        System.Data.SqlClient.SqlBulkCopyOptions.Default,
                        (System.Data.SqlClient.SqlTransaction) sqlTransaction))
                    {
                        bulkCopy.DestinationTableName = "Version_LiveUpdate";
                        bulkCopy.WriteToServer(dtLiveUpdate);
                    }
                }
                sqlTransaction?.Commit();

                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"{opsMsg} version",
                    Text = $"{opsMsg} Update version success"
                });
                NavigationManager.NavigateTo("versions");
            }
            catch (Exception ex)
            {
                sqlTransaction?.Rollback();
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"{opsMsg} version",
                    Html = $"{opsMsg} version fail <strong>{ex.Message}</strong>"
                });
            }
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("versions");
    }

    async Task LoadVersionDeploy()
    {
        if (string.IsNullOrWhiteSpace(BatchId))
            return;

        using (var conn = await DbContext.ConnectAsync())
        {
            var versionDeploys = await LiveUpdateContext.GetVersionDeploy(conn, BatchId);
            var versionDeploy = versionDeploys.FirstOrDefault();

            _deployVersion.BrandId = versionDeploy.BrandId;
            _deployVersion.BatchStatus = versionDeploy.BatchStatus;
            _deployVersion.ProgramId = versionDeploy.ProgramId;
            _deployVersion.ProgramVersion = versionDeploy?.ProgramVersion;
            _deployVersion.FileUrl = versionDeploy?.FileUrl;
            _deployVersion.AutoBackup = versionDeploy.AutoBackup;
            _deployVersion.InsertDate = versionDeploy.InsertDate;
            _deployVersion.UpdateDate = versionDeploy.UpdateDate;
        }
    }

    async Task LoadShopCategoryAsync()
    {
        try
        {
            _shopCats = await RepoService.GetShopCategoryAsync();

            var shopCatIds = _shops.Where(s => s.Selected).Select(s => s.ShopCatId).ToArray();
            var shopCatByShopIds = _shopCats.Where(s => shopCatIds.Contains(s.ShopCateId)).ToList();
            shopCatByShopIds.ForEach(s => s.Selected = true);
        }
        catch { }
    }

    async Task LoadBrandAsync()
    {
        try
        {
            _brands = await RepoService.GetBrandAsync();
            _allShops = await RepoService.GetShopSelectedUpdateAsync(BatchId);
            BrandId = _brands.FirstOrDefault().BrandId;
        }
        catch
        {
        }
    }
}
