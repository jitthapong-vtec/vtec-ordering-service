@page "/versionedit"
@page "/versionedit/{batchId}/{brandId:int}"

@using System.Data
@using System.Collections
@using VerticalTec.POS.LiveUpdate
@using VerticalTec.POS.LiveUpdateConsole.Models
@using VerticalTec.POS.Database
@using VerticalTec.POS.Utils
@using VerticalTec.POS.LiveUpdateConsole.Services
@using CurrieTechnologies.Razor.SweetAlert2
@using System.Text;

@inject IDatabase DbContext
@inject SweetAlertService Swal
@inject LiveUpdateDbContext LiveUpdateContext;
@inject NavigationManager NavigationManager;
@inject RepoService RepoService;

<h3>Create version</h3>

@if (brands.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@deployVersion" OnValidSubmit="@(async() => await SaveAsync())">
        <DataAnnotationsValidator />
        <div class="form-group col-md-4">
            <label>Brands</label>
            <select class="form-control" @onchange="@OnBrandChanged">
                @foreach (var brand in brands)
                {
                    @if (brand.BrandId == @BrandId)
                    {
                        <option selected value="@brand.BrandId">@brand.BrandName</option>
                    }
                    else
                    {
                        <option value="@brand.BrandId">@brand.BrandName</option>
                    }
                }
            </select>
        </div>
        <div class="form-group col-md-4">
            <label>Apply to shops</label>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="0" value="0" @onchange="@OnCheckAllShop" />
                        <label for="0" class="custom-control-label">Check all</label>
                    </div>
                </li>
            </ul>
            <ul class="list-group list-group-flush" style="height:300px; overflow:auto;">
                @foreach (var shop in shops)
                {
                    <li class="list-group-item">
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="@shop.ShopId" @bind="shop.Selected" />
                            <label for="@shop.ShopId" class="custom-control-label">@shop.ShopName</label>
                        </div>
                    </li>
                }
            </ul>
        </div>

        <div class="form-group col-md-4">
            <label>Program types</label>
            <select class="form-control" @bind="@deployVersion.ProgramId">
                @foreach (var programType in deployVersion.ProgramTypes)
                {
                    var programId = programType.ProgramTypeId;
                    var programName = programType.ProgramName;
                    <option value="@programId">@programName</option>
                }
            </select>
        </div>

        <div class="form-group col-md-4">
            <label>Version</label>
            <input type="text" class="form-control" @bind="@deployVersion.ProgramVersion">
        </div>

        <div class="form-group col-md-4">
            <label>Upload Patch (Support only .zip)</label>
            <DxUpload Name="file" na UploadUrl="@GetUploadUrl("api/Resource/UploadPatch")"
                      AllowMultiFileUpload="false"
                      AllowedFileExtensions="@(new List<string> { ".zip" })" 
                      ShowFileList="false"
                      FileUploaded="OnFileUploaded">
            </DxUpload>
        </div>

        <div class="form-group col-md-4">
            <div class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input" id="chkAutoBackup" @bind="@deployVersion.AutoBackup" />
                <label for="chkAutoBackup" class="custom-control-label">Auto backup when download file success</label>
            </div>
        </div>
        <ValidationSummary />

        <div class="form-row m-4">
            <button type="submit" class="btn btn-primary">Ok</button> &nbsp; <button type="button" @onclick="@Cancel" class="btn btn-secondary">Cancel</button>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public string BatchId { get; set; }

    [Parameter]
    public int BrandId { get; set; }

    private DeployVersion deployVersion = new DeployVersion();

    List<BrandData> brands = new List<BrandData>();
    List<ShopData> allShops = new List<ShopData>();
    List<ShopData> shops = new List<ShopData>();

    protected override async Task OnInitializedAsync()
    {
        await LoadBrandAsync();
        await LoadVersionDeploy();

        if (BrandId > 0)
            RefreshShop();
    }

    void OnBrandChanged(ChangeEventArgs e)
    {
        BrandId = Convert.ToInt32(e.Value);
        RefreshShop();
    }

    void RefreshShop()
    {
        shops = allShops.Where(s => s.BrandId == BrandId).ToList();
    }

    void OnCheckAllShop(ChangeEventArgs e)
    {
        if (!shops.Any())
            return;

        foreach (var shop in shops)
        {
            shop.Selected = Convert.ToBoolean(e.Value);
        }
    }

    void OnFileUploaded(FileUploadEventArgs e)
    {
        deployVersion.FileUrl = GetUploadUrl($"Patch/{e.FileInfo.Name}");
        this.StateHasChanged();
    }

    string GetUploadUrl(string url)
    {
        return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }

    async Task SaveAsync()
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            System.Data.IDbTransaction sqlTransaction = conn.BeginTransaction();

            var versionDeploy = new VersionDeploy();
            var isUpdate = !string.IsNullOrWhiteSpace(BatchId);
            if (isUpdate)
                versionDeploy.BatchId = BatchId;
            versionDeploy.BrandId = BrandId;
            versionDeploy.BatchStatus = deployVersion.BatchStatus;
            versionDeploy.ProgramId = deployVersion.ProgramId;
            versionDeploy.ProgramName = deployVersion.ProgramName;
            versionDeploy.ProgramVersion = deployVersion.ProgramVersion;
            versionDeploy.FileUrl = deployVersion.FileUrl;
            versionDeploy.AutoBackup = deployVersion.AutoBackup;
            versionDeploy.InsertDate = deployVersion.InsertDate;
            versionDeploy.UpdateDate = DateTime.Now;

            var opsMsg = isUpdate ? "Update" : "Create";

            try
            {

                await LiveUpdateContext.AddOrUpdateVersionDeploy(conn, versionDeploy, sqlTransaction);

                var cmd = DbContext.CreateCommand(conn);
                cmd.Transaction = sqlTransaction;

                cmd.CommandText = "delete from Version_LiveUpdate where BatchID=@batchId";
                cmd.Parameters.Add(DbContext.CreateParameter("@batchId", BatchId));
                await DbContext.ExecuteNonQueryAsync(cmd);

                cmd.Parameters.Clear();
                cmd.CommandText = "select ShopID, ComputerID from computername where ComputerType=0 and Deleted=0";
                var dtComputers = new DataTable();
                using (var reader = await DbContext.ExecuteReaderAsync(cmd))
                {
                    dtComputers.Load(reader);
                }

                var selectedShops = shops.Where(s => s.Selected).ToList();
                StringBuilder stringBuilder = new StringBuilder("insert into Version_LiveUpdate(BatchID, ShopID, ComputerID, ProgramID, ProgramName, UpdateVersion, InsertDate, UpdateDate) values ");
                List<string> rows = new List<string>();
                foreach (var shop in selectedShops)
                {
                    var computerIds = dtComputers.AsEnumerable().Where(r => r.GetValue<int>("ShopID") == shop.ShopId).Select(c => c.GetValue<int>("ComputerID")).ToList();

                    foreach (var computerId in computerIds)
                    {
                        rows.Add($"('{versionDeploy.BatchId}', {shop.ShopId}, {computerId}, {(int)versionDeploy.ProgramId}, '{versionDeploy.ProgramName}', '{versionDeploy.ProgramVersion}', GETDATE(), GETDATE())");
                    }
                }
                if (rows.Count > 0)
                {
                    stringBuilder.Append(string.Join(",", rows));
                    stringBuilder.Append(";");
                    cmd.CommandText = stringBuilder.ToString();
                    await DbContext.ExecuteNonQueryAsync(cmd);
                }
                sqlTransaction?.Commit();

                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"{opsMsg} version",
                    Text = $"{opsMsg} Update version success"
                });
                NavigationManager.NavigateTo("versions");
            }
            catch (Exception ex)
            {
                sqlTransaction?.Rollback();
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"{opsMsg} version",
                    Html = $"{opsMsg} version fail <strong>{ex.Message}</strong>"
                });
            }
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("versions");
    }

    async Task LoadVersionDeploy()
    {
        if (string.IsNullOrWhiteSpace(BatchId))
            return;

        using (var conn = await DbContext.ConnectAsync())
        {
            var versionDeploys = await LiveUpdateContext.GetVersionDeploy(conn, BatchId);
            var versionDeploy = versionDeploys.FirstOrDefault();

            deployVersion.BrandId = versionDeploy.BrandId;
            deployVersion.BatchStatus = versionDeploy.BatchStatus;
            deployVersion.ProgramId = versionDeploy.ProgramId;
            deployVersion.ProgramVersion = versionDeploy?.ProgramVersion;
            deployVersion.FileUrl = versionDeploy?.FileUrl;
            deployVersion.AutoBackup = versionDeploy.AutoBackup;
            deployVersion.InsertDate = versionDeploy.InsertDate;
            deployVersion.UpdateDate = versionDeploy.UpdateDate;
        }
    }

    async Task LoadBrandAsync()
    {
        try
        {
            brands = await RepoService.GetBrandAsync();
            allShops = await RepoService.GetShopSelectedUpdateAsync(BatchId);
            BrandId = brands.FirstOrDefault().BrandId;
        }
        catch (Exception ex)
        {
        }
    }
}
