@page "/clients"
@using VerticalTec.POS.LiveUpdate
@using Microsoft.AspNetCore.SignalR.Client
@using VerticalTec.POS.Database
@using VerticalTec.POS.LiveUpdateConsole.Services
@using VerticalTec.POS.LiveUpdateConsole.Models
@using System.Threading;

@inject IDatabase DbContext
@inject LiveUpdateDbContext LiveupdateContext
@inject NavigationManager NavigationManager
@inject RepoService RepoService

@if (clients == null)
{
    <p><em>กำลังโหลด...</em></p>
}
else
{
    <div class="form-row">
        <div class="form-group col-md-6">
            <h3>เครื่อง POS สาขา</h3>
            <div class="col-md-6">
                <label>แบรนด์</label>
                <select class="form-control" @onchange="@OnBrandChanged">
                    @foreach (var brand in brands)
                    {
                        @if (brand.BrandId == selectedBrandId)
                        {
                            <option selected value="@brand.BrandId">@brand.BrandName</option>
                        }
                        else
                        {
                            <option value="@brand.BrandId">@brand.BrandName</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <DxDataGrid Data="@clients" ShowFilterRow="false" ShowPager="false" @ref="@gridRef">
        <DxDataGridColumn Caption="สถานะ" TextAlignment="@DataGridTextAlign.Center">
            <DisplayTemplate>
                @{
                    var client = (context as VersionInfo);
                    <span style="width:24px;height:24px;border-radius:50%;display:inline-block;" class="@(client.IsOnline ? "bg-success" : "bg-danger")"></span>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridColumn Caption="สาขา">
            <DisplayTemplate>
                @{
                    var client = (context as VersionInfo);
                    <span>@client.ShopCode : @client.ShopName</span>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridColumn Caption="ชื่อเครื่อง">
            <DisplayTemplate>
                @{
                    var client = (context as VersionInfo);
                    @client.ComputerName
                }
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(VersionInfo.ProgramVersion)" Caption="โปรแกรมเวอร์ชั่น"/>
        <DxDataGridColumn Caption="สถานะการทำงาน">
            <DisplayTemplate>
                @{
                    var client = (context as VersionInfo);
                    <div style="overflow:hidden; line-height:1.5em; width:200px;font-size:small;">
                        @client.ProcessMessage
                    </div>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridColumn TextAlignment="@DataGridTextAlign.Center">
            <DisplayTemplate>
                @{
                    var client = (context as VersionInfo);
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" disabled="@(client.CanExecute == false)" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Action
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" @onclick="@(async() => await SendBackupCommand(client))">Backup</a>
                            <a class="dropdown-item" @onclick="@(async() => await SendDownloadFileCommand(client))">Download update file</a>
                        </div>
                    </div>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
    </DxDataGrid>
}

@code{

    DxDataGrid<VersionInfo> gridRef;

    HubConnection connection;

    List<VersionInfo> clients;

    List<BrandData> brands = new List<BrandData>();
    List<ShopData> shops = new List<ShopData>();

    int selectedBrandId;

    CancellationTokenSource _connectionTokenSource;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrandAsync();
        await LoadClient();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var url = NavigationManager.BaseUri + "console";
            connection = new HubConnectionBuilder().WithUrl(url)
                .Build();

            connection.Closed += async (arg) => await StartConnection();
            connection.On<VersionInfo>("ClientUpdateInfo", ClientUpdateInfo);
            connection.On<string>("ClientDisconnect", ClientDisconnect);
            connection.On<VersionLiveUpdate>("ClientUpdateVersionState", ClientUpdateVersionState);

            await StartConnection();
        }
    }

    async Task StartConnection()
    {
        _connectionTokenSource?.Cancel();
        _connectionTokenSource = new CancellationTokenSource();

        while (true)
        {
            if (_connectionTokenSource.IsCancellationRequested)
                break;
            try
            {
                await connection.StartAsync(_connectionTokenSource.Token);
                await connection.InvokeAsync("GetClientInfo", "");
                break;
            }
            catch
            {
                await Task.Delay(TimeSpan.FromSeconds(3));
            }
        }
    }

    async Task LoadBrandAsync()
    {
        brands = await RepoService.GetBrandAsync();
        selectedBrandId = brands.FirstOrDefault().BrandId;
        shops = await RepoService.GetShopAsync(selectedBrandId);
    }

    async Task OnBrandChanged(ChangeEventArgs e)
    {
        selectedBrandId = Convert.ToInt32(e.Value);
        await LoadClient();
    }

    async Task LoadClient()
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            clients = await LiveupdateContext.GetVersionInfo(conn);
            var shopIds = shops.Select(s => s.ShopId).ToArray();
            clients = clients.Where(c => shopIds.Contains(c.ShopId)).ToList();
        }
    }

    public Task ClientDisconnect(string connectionId)
    {
        try
        {
            var client = clients.Where(c => c.ConnectionId == connectionId).FirstOrDefault();
            client.IsOnline = false;
            clients[clients.IndexOf(client)] = client;
            gridRef.Refresh();
        }
        catch { }
        return Task.FromResult(true);
    }

    public async Task GetClientInfo(VersionInfo client)
    {
        await connection.InvokeAsync("GetClientInfo", client.ConnectionId);
    }

    public async Task SendDownloadFileCommand(VersionInfo client)
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            await connection.InvokeAsync("SendDownloadFileCommand", client.ConnectionId);
            client.CanExecute = false;
            await gridRef.Refresh();
        }
    }

    public async Task SendBackupCommand(VersionInfo client)
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            await connection.InvokeAsync("SendBackupCommand", client.ConnectionId);
            client.CanExecute = false;
            await gridRef.Refresh();
        }
    }

    public async Task ClientUpdateInfo(VersionInfo versionInfo)
    {
        try
        {
            var client = clients.Where(c => c.ShopId == versionInfo.ShopId && c.ComputerId == versionInfo.ComputerId).FirstOrDefault();
            client.ConnectionId = versionInfo.ConnectionId;
            client.IsOnline = versionInfo.IsOnline;
            client.ProgramVersion = versionInfo.ProgramVersion;
            clients[clients.IndexOf(client)] = client;
            await gridRef.Refresh();
        }
        catch
        {
            await LoadClient();
        }
    }

    public async Task ClientUpdateVersionState(VersionLiveUpdate state)
    {
        try
        {
            var client = clients.Where(c => c.ShopId == state.ShopId && c.ComputerId == state.ComputerId).FirstOrDefault();
            if (state.ReadyToUpdate == 1)
            {
                client.ProcessMessage = "Ready to update";
                if (state.UpdateStatus == 2)
                    client.ProcessMessage = "Update successfully";
            }
            else
            {
                client.ProcessMessage = state.MessageLog;
            }
            if (state.CommandStatus == CommandStatus.Finish || state.CommandStatus == CommandStatus.Error)
                client.CanExecute = true;
            clients[clients.IndexOf(client)] = client;
            await gridRef.Refresh();
        }
        catch
        {
            await LoadClient();
        }
    }
}