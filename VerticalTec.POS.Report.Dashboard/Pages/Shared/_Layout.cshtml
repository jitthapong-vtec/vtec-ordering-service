<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">

    <title></title>
    <link rel="stylesheet" href="~/css/vendor.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="~/js/vendor.js" asp-append-version="true"></script>
    <script src="~/js/moment.min.js"></script>

    <script>
        var DRAWER_OPENED_KEY = "drawer-opened";

        var breakpoints = {
            xSmallMedia: window.matchMedia("(max-width: 599.99px)"),
            smallMedia: window.matchMedia("(min-width: 600px) and (max-width: 959.99px)"),
            mediumMedia: window.matchMedia("(min-width: 960px) and (max-width: 1279.99px)"),
            largeMedia: window.matchMedia("(min-width: 1280px)")
        };

        var lastScrollOffset = 0;
        var isScrollUp = false;
        var isCriteriaShow = true;
        var reportType = 1;
        var api = '@Url.Content("~/api/report/")';
        var staffId = JSON.parse(localStorage.getItem('staff')).staffId;

        var shopDataSource = new DevExpress.data.DataSource({
            store: new DevExpress.data.CustomStore({
                //loadMode: "raw",
                load: function(loadOptions) {
                    return $.getJSON(api + "shopdata?staffId=" + staffId);
                }
            })
        });

        function initCriteria() {
            $('#criteria').on('hide.bs.collapse', function () {
                isCriteriaShow = false;
                $("#btn-toggle").dxButton("instance").option("icon", "chevrondown");
            })
            $('#criteria').on('show.bs.collapse', function () {
                isCriteriaShow = true;
                $("#btn-toggle").dxButton("instance").option("icon", "chevronup");
            })

            $('#criteria').collapse('show');

            let savedCriteria = getCriteria();
            if (savedCriteria) {
                let slShop = $("#slShop").dxTagBox('instance');

                slShop.option('value', savedCriteria.shopIds);
                $("#fromDate").dxDateBox('instance').option('value', moment(savedCriteria.fromDate));
                $("#toDate").dxDateBox('instance').option('value', moment(savedCriteria.toDate));
                $("#period-group").dxButtonGroup('instance').option('selectedItemKeys', [savedCriteria.period]);
            }
            $("#period-scrollview").dxScrollView({ direction: "horizontal" });

            shopDataSource.load().done(function () {
                loadReportClick();
            });
        }

        function scrollViewOnScroll(obj) {
            var scrollOffset = obj.scrollOffset.top;

            if (scrollOffset > lastScrollOffset)
                isScrollUp = true;
            else if (scrollOffset < lastScrollOffset)
                isScrollUp = false;

            if (isScrollUp) {
                if (isCriteriaShow)
                    $('#criteria').collapse('hide');
            }
            if (obj.reachedTop) {
                $('#criteria').collapse('show');
            }
            lastScrollOffset = scrollOffset;
        }

        function showLoading() {
            $("#btn-search-indicator").dxLoadIndicator("option", "visible", true);
            $("#btn-search").dxButton("option", "disabled", true);
        }

        function hideLoading() {
            $("#btn-search-indicator").dxLoadIndicator("option", "visible", false);
            $("#btn-search").dxButton("option", "disabled", false);
        }

        function toggleCriteria() {
            if (isCriteriaShow)
                $('#criteria').collapse('hide');
            else
                $('#criteria').collapse('show');
        }

        function periodGroupItemClick(e) {
            let period = e.itemData.period;
            let year = moment().year();
            let month = moment().month();
            let day = moment().date();
            let daysInMonth = moment().daysInMonth();
            let lastMonth = moment().add(-1, 'month');
            let today = moment();
            let yesterday = moment().add(-1, 'days');
            switch (period) {
                case "last_month":
                    $("#fromDate").dxDateBox("instance").option("value", moment(lastMonth).set('date', 1));
                    $("#toDate").dxDateBox("instance").option("value", new Date(lastMonth.year(), lastMonth.month(), lastMonth.daysInMonth()));
                    break;
                case "this_month":
                    $("#fromDate").dxDateBox("instance").option("value", new Date(year, month, 1));
                    $("#toDate").dxDateBox("instance").option("value", new Date(year, month, day));
                    break;
                case "yesterday":
                    $("#fromDate").dxDateBox("instance").option("value", yesterday);
                    $("#toDate").dxDateBox("instance").option("value", yesterday);
                    break;
                case "today":
                    $("#fromDate").dxDateBox("instance").option("value", today);
                    $("#toDate").dxDateBox("instance").option("value", today);
                    break;
            }
        }

        function loadReportClick() {
            createCriteria();
            loadReport();
        }

        function getCriteria() {
            return JSON.parse(sessionStorage.getItem("criteria"));
        }

        function createCriteria() {
            let slShop = $("#slShop").dxTagBox('instance');
            let shopIds = slShop.option('value');
            let shopName = '';
            try {
                shopName = slShop.option("selectedItems").map(obj => obj.shopName).join("<br/>");
            } catch (e) {
            }
            let fromDate = $("#fromDate").dxDateBox('instance').option('value');
            let toDate = $("#toDate").dxDateBox('instance').option('value');
            let period = $("#period-group").dxButtonGroup('instance').option('selectedItems')[0].period;

            var criteria = JSON.stringify({
                "shopIds": shopIds,
                "shopName": shopName,
                "fromDate": fromDate,
                "toDate": toDate,
                "period": period,
                "reportType": reportType
            });
            saveCriteria(criteria);
        }

        function saveCriteria(criteria) {
            sessionStorage.setItem("criteria", criteria);
        }

        function getDrawer() {
            return $("#layout-drawer").dxDrawer("instance");
        }

        function restoreDrawerOpened() {
            var isLarge = breakpoints.largeMedia.matches;
            if (!isLarge)
                return false;

            var state = sessionStorage.getItem(DRAWER_OPENED_KEY);
            if (state === null)
                return isLarge;

            return state === "true";
        }

        function saveDrawerOpened() {
            sessionStorage.setItem(DRAWER_OPENED_KEY, getDrawer().option("opened"));
        }

        function updateDrawer() {
            var isXSmall = breakpoints.xSmallMedia.matches,
                isLarge = breakpoints.largeMedia.matches;

            getDrawer().option({
                openedStateMode: isLarge ? "shrink" : "overlap",
                revealMode: isXSmall ? "slide" : "expand",
                minSize: isXSmall ? 0 : 60,
                shading: !isLarge,
            });
        }

        function init() {
            $("#title").html('@ViewData["Title"]');
            $("#layout-drawer-scrollview").dxScrollView({ direction: "vertical" });

            $.each(breakpoints, function (_, size) {
                size.addListener(function (e) {
                    if (e.matches)
                        updateDrawer();
                });
            });

            updateDrawer();
        }

        function navigate(url, delay) {
            if (url)
                setTimeout(function () { location.href = url }, delay);
        }

        function onMenuButtonClick() {
            getDrawer().toggle();
            saveDrawerOpened();
        }

        function onTreeViewItemClick(e) {
            var drawer = getDrawer();
            var savedOpened = restoreDrawerOpened();
            var actualOpened = drawer.option("opened");

            if (!actualOpened) {
                drawer.show();
            } else {
                var willHide = !savedOpened || !breakpoints.largeMedia.matches;
                var willNavigate = !e.itemData.selected;

                if (willHide)
                    drawer.hide();

                if (willNavigate)
                    navigate(e.itemData.path, willHide ? 400 : 0);
            }
        }

        function getProperty(id) {
            var properies = JSON.parse(localStorage.getItem("properties"));
            var result = $.grep(properies, function (prop) {
                return (prop.PropertyId === id);
            });
            return result[0];
        }

        function logoutClick() {
            var myDialog = DevExpress.ui.dialog.custom({
                title: "Logout",
                messageHtml: "<b>Do you want to logout?</b>",
                buttons: [{
                    text: "No",
                    onClick: function (e) {
                        return false;
                    }
                },{
                        text: "Yes",
                        onClick: function (e) {
                            return true;
                        }
                    }
                ]
            });
            myDialog.show().done(function (dialogResult) {
                if (dialogResult) {
                    sessionStorage.clear();
                    localStorage.clear();
                    location.href = '@Url.Content("~/Login")';
                }
            });
        }

        $(function () {
            init();
            initCriteria();
            pageLoaded();
        });

    </script>
</head>

<body>
    <div id="root-content">
        <div class="layout-header">
            @(Html.DevExtreme().Toolbar()
                .Items(items =>
                        {
                    items.Add()
                        .Widget(w => w
                            .Button()
                            .Icon("menu")
                            .OnClick("onMenuButtonClick")
                        )
                        .Location(ToolbarItemLocation.Before)
                        .CssClass("menu-button");
                    items.Add()
                        .Html("<div id='title'>Report</div>")
                        .Location(ToolbarItemLocation.Before)
                        .CssClass("header-title");
                            items.Add().Widget(w => w.Button().Text("Logout").ElementAttr("class", "toolbar-button")
                .OnClick("logoutClick"))
                .LocateInMenu(ToolbarItemLocateInMenuMode.Never)
                .Location(ToolbarItemLocation.After);
                })
            )
        </div>
        <div class="layout-body">
            @(Html.DevExtreme().Drawer()
                .ID("layout-drawer")
                .Position(DrawerPosition.Left)
                .Content(@<text>
                            <div id="layout-drawer-scrollview">
                                <div class="card">
                                    <div id="criteria" class="collapse">
                                        <div class="dx-fieldset">
                                            <div class="dx-field">
                                                <div class="dx-field-label">Shop</div>
                                                <div class="dx-field-value">
                                                    @(Html.DevExtreme().TagBox()
                                              .ID("slShop")
                                              .DataSource(new JS("shopDataSource"))
                                              .ShowSelectionControls(true)
                                              .SearchEnabled(true)
                                              .SearchMode(DropDownSearchMode.Contains)
                                              .StylingMode(EditorStylingMode.Outlined)
                                              .ValueExpr("shopId")
                                              .DisplayExpr("shopName"))
                                                </div>
                                            </div>
                                            <div class="dx-field">
                                                <div class="dx-field-label">From Date</div>
                                                <div class="dx-field-value">
                                                    @(Html.DevExtreme().DateBox()
                                              .ID("fromDate")
                                              .StylingMode(EditorStylingMode.Outlined)
                                              .PickerType(DateBoxPickerType.Rollers)
                                              .DisplayFormat("dd/MM/yyyy")
                                              .Value(DateTime.Now)
                                                    )
                                                </div>
                                            </div>
                                            <div class="dx-field">
                                                <div class="dx-field-label">To Date</div>
                                                <div class="dx-field-value">
                                                    @(Html.DevExtreme().DateBox()
                                              .ID("toDate")
                                              .StylingMode(EditorStylingMode.Outlined)
                                              .PickerType(DateBoxPickerType.Rollers)
                                              .DisplayFormat("dd/MM/yyyy")
                                              .Value(DateTime.Now)
                                                    )
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div id="period-scrollview" class="text-center">
                                                @(Html.DevExtreme().ButtonGroup().KeyExpr("period")
                                               .ID("period-group")
                                              .StylingMode(ButtonStylingMode.Outlined)
                                              .FocusStateEnabled(true)
                                              .Items(items =>
                                              {
                                                  items.Add().Text("Today").Option("period", "today");
                                                  items.Add().Text("Yesterday").Option("period", "yesterday");
                                                  items.Add().Text("This month").Option("period", "this_month");
                                                  items.Add().Text("Last month").Option("period", "last_month");
                                              }).SelectedItemKeys(new[] { "today" })
                                              .OnItemClick("periodGroupItemClick"))
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-footer">
                                        <div class="d-flex justify-content-between">
                                            <div class="m-3">
                                            </div>
                                            <div>
                                                @(Html.DevExtreme().Button()
                                          .Text("Search")
                                          .Width(230)
                                          .Height(48)
                                          .ID("btn-search")
                                          .Template(new TemplateName("btn-indicator-template")).OnClick("loadReportClick"))
                                            </div>
                                            <div>
                                                @(Html.DevExtreme().Button().Icon("chevronup").Width(48).Height(48)
                                              .ID("btn-toggle").ElementAttr("class", "button-icon").OnClick("toggleCriteria"))
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="content">
                                    <div class="text-center m-4" id="reportHeader"></div>
                                    @RenderBody()
                                </div>
                            </div>
                </text>).Template(new TemplateName("navigation-menu"))
            )
        </div>
    </div>

    @using (Html.DevExtreme().NamedTemplate("btn-indicator-template"))
    {
        @(Html.DevExtreme().LoadIndicator().ID("btn-search-indicator").ElementAttr("class", "btn-indicator").Visible(false))
        <span class="dx-button-text"><%= text %></span>
    }

    @using (Html.DevExtreme().NamedTemplate("navigation-menu"))
    {
        <div class="menu-container dx-swatch-additional">

            @functions{
                bool IsCurrentPage(string pageName)
                {
                    var pageUrl = Url.Page(pageName);
                    var currentPageUrl = Url.Page(ViewContext.RouteData.Values["page"].ToString());
                    return pageUrl == currentPageUrl;
                }
            }

            @(Html.DevExtreme().TreeView()
                .Items(items =>
                {
                    items.Add()
                        .Text("Summary")
                        .Icon("datafield")
                        .Option("path", Url.Page("SummaryReport"))
                        .Selected(IsCurrentPage("SummaryReport"));
                    items.Add()
                        .Text("Hourly")
                        .Icon("clock")
                        .Option("path", Url.Page("HourlyReport"))
                        .Selected(IsCurrentPage("HourlyReport"));
                    items.Add()
                                .Text("Bill")
                                .Icon("money")
                                .Option("path", Url.Page("BillReport"))
                                .Selected(IsCurrentPage("BillReport"));
                })
                .ExpandEvent(TreeViewExpandEvent.Click)
                .SelectionMode(NavSelectionMode.Single)
                .SelectedExpr("selected")
                .FocusStateEnabled(false)
                .Width(250)
                .OnItemClick("onTreeViewItemClick")
            )
        </div>
    }
</body>
</html>
