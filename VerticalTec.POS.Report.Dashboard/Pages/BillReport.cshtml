@page
@model VerticalTec.POS.Report.Dashboard.Pages.BillReportModel
@{
    ViewData["Title"] = "Bill";
}

<div class="mt-4 ml-1 mr-1 text-center">
    <div id="report-type-scrollview">
        @(Html.DevExtreme().ButtonGroup().ID("btn-group-report-type").KeyExpr("group")
                                            .FocusStateEnabled(true)
                                            .Items(items =>
                                            {
                                                items.Add().Text("Details").Option("group", "0");
                                                items.Add().Text("Group By Date").Option("group", "1");
                                                items.Add().Text("Group By Shop").Option("group", "2");
                                            }).SelectedItemKeys(new[] { "0" })
                                            .OnItemClick("groupItemClick"))
    </div>
</div>

<div id="billGrid" class="m-2">
</div>

<script>
    var dataSource = new DevExpress.data.DataSource({
        store: new DevExpress.data.CustomStore({
            loadMode: "raw",
            load: function (loadOptions) {
                let criteria = getCriteria();
                let shopName = criteria.shopName;
                let shopIds = criteria.shopIds;
                let fromDate = moment(criteria.fromDate);
                let toDate = moment(criteria.toDate);
                let url = '@Url.Content("~/api/report/bills")?shopIds=' + shopIds + '&startDate=' + fromDate.toISOString() + '&endDate=' + toDate.toISOString();

                $("#reportHeader").html("<b>" + shopName + "</b></br>" + moment(fromDate).format("D/M/Y") + " - " + moment(toDate).format("D/M/Y"));

                return $.getJSON(url);
            },
            onLoaded: function (result) {
            }
        })
    });


    function groupItemClick(e) {
        var grid = $("#billGrid").dxDataGrid('instance');
        grid.columnOption("SaleDate", "groupIndex", undefined);
        grid.columnOption("ShopName", "groupIndex", undefined);

        switch (e.itemData.group) {
            case "1":
                grid.columnOption("SaleDate", "groupIndex", 1);
                break;
            case "2":
                grid.columnOption("ShopName", "groupIndex", 1);
                break;
        }
    }

    function loadReport() {
        dataSource.reload();
    }

    function pageLoaded() {
        var currencyProp = getProperty(12);
        var qtyProp = getProperty(15);
        var cellTemplate = function (element, info) {
            if (info.data.TransactionStatus == 99) {
                element.append("<div>" + info.text + "</div>")
                    .css("text-decoration", "line-through")
                    .css("color", "red");
            } else {
                element.append("<div>" + info.text + "</div>");
            }
        };

        $("#billGrid").dxDataGrid({
            dataSource: dataSource,
            showBorders: true,
            grouping: {
                autoExpandAll: true,
            },
            paging: {
                pageSize: 100
            },
            columns: [
                {
                    dataField: "SaleDate",
                    visible:false,
                },
                {
                    dataField: "ShopName",
                    visible:false
                },
                {
                    dataField: "ReceiptNumber",
                    cellTemplate: cellTemplate
                },
                {
                    caption: 'Qty',
                    dataField: "Qty",
                    format: qtyProp.PropertyTextValue,
                    alignment: 'right',
                    width: '20%',
                    cellTemplate: cellTemplate
                },
                {
                    dataField: "Amount",
                    format: currencyProp.PropertyTextValue,
                    alignment: 'right',
                    width:'30%',
                    cellTemplate: cellTemplate
                }
            ],
            summary: {
                //groupItems: [{
                //    column: "Qty",
                //    summaryType: "custom",
                //    showInGroupFooter: true,
                //    valueFormat: qtyProp.PropertyTextValue,
                //    displayFormat: "{0}",
                //    showInColumn: "Qty"
                //},{
                //    column: "Amount",
                //    summaryType: "custom",
                //    showInGroupFooter: true,
                //    valueFormat: currencyProp.PropertyTextValue,
                //    displayFormat: "{0}",
                //    showInColumn: "Amount"
                //}],
                totalItems: [{
                    name: "Qty",
                    showInColumn: "Qty",
                    displayFormat: "{0}",
                    valueFormat: qtyProp.PropertyTextValue,
                    summaryType: "custom"
                }, {
                    name: "Amount",
                    showInColumn: "Amount",
                    displayFormat: "{0}",
                    valueFormat: currencyProp.PropertyTextValue,
                    summaryType: "custom"
                    }],
                calculateCustomSummary: function (options) {
                    if (options.name === "Qty") {
                        if (options.summaryProcess === "start") {
                            options.totalValue = 0;
                        }
                        if (options.summaryProcess === "calculate") {
                            if(options.value.TransactionStatus === 2)
                                options.totalValue = options.totalValue + options.value.Qty;
                        }
                    }
                    if (options.name === "Amount") {
                        if (options.summaryProcess === "start") {
                            options.totalValue = 0;
                        }
                        if (options.summaryProcess === "calculate") {
                            if(options.value.TransactionStatus === 2)
                                options.totalValue = options.totalValue + options.value.Amount;
                        }
                    }
                }
            }
        });
    }
</script>

