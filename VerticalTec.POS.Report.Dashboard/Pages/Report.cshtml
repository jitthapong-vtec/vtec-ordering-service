@page
@model VerticalTec.POS.Report.Dashboard.Pages.ReportModel
<div id="root-content">
    <div class="layout-header">
        @(Html.DevExtreme().Toolbar()
        .Items(items =>
        {
            items.Add()
                .Html("<div>Report</div>")
                .Location(ToolbarItemLocation.Before)
                .CssClass("header-title");
            items.Add().Widget(w => w.Button().Text("Logout").ElementAttr("class", "toolbar-button")
                .OnClick("logoutClick"))
                .LocateInMenu(ToolbarItemLocateInMenuMode.Never)
                .Location(ToolbarItemLocation.After);
        })
        )
        <div style="padding:0">
            <div id="criteria" class="collapse">
                <div class="dx-fieldset">
                    <div class="dx-field">
                        <div class="dx-field-label">Shop</div>
                        <div class="dx-field-value">
                            @(Html.DevExtreme().SelectBox()
                            .ID("slShop")
                            .Value(0)
                            .SearchEnabled(true)
                            .SearchMode(DropDownSearchMode.Contains)
                            .StylingMode(EditorStylingMode.Outlined)
                            .ValueExpr("shopId")
                            .DisplayExpr("shopName"))
                        </div>
                    </div>
                    <div class="dx-field">
                        <div class="dx-field-label">From Date</div>
                        <div class="dx-field-value">
                            @(Html.DevExtreme().DateBox()
                            .ID("fromDate")
                            .StylingMode(EditorStylingMode.Outlined)
                            .PickerType(DateBoxPickerType.Rollers)
                            .DisplayFormat("dd/MM/yyyy")
                            .Value(DateTime.Now)
                            )
                        </div>
                    </div>
                    <div class="dx-field">
                        <div class="dx-field-label">To Date</div>
                        <div class="dx-field-value">
                            @(Html.DevExtreme().DateBox()
                            .ID("toDate")
                            .StylingMode(EditorStylingMode.Outlined)
                            .PickerType(DateBoxPickerType.Rollers)
                            .DisplayFormat("dd/MM/yyyy")
                            .Value(DateTime.Now)
                            )
                        </div>
                    </div>
                </div>
                <div style="margin:0.5em;">
                    @(Html.DevExtreme().ScrollView()
                    .Direction(ScrollDirection.Horizontal)
                    .Content(@<text>
                                <div class="text-center">
                                    @(Html.DevExtreme().ButtonGroup().KeyExpr("period")
                          .StylingMode(ButtonStylingMode.Text)
                          .FocusStateEnabled(true)
                          .Items(items =>
                          {
                              items.Add().Text("Today").Option("period", "today");
                              items.Add().Text("Yesterday").Option("period", "yesterday");
                              items.Add().Text("This month").Option("period", "this_month");
                              items.Add().Text("Last month").Option("period", "last_month");
                          }).SelectedItemKeys(new[] { "today" })
                          .OnItemClick("periodGroupItemClick"))
                                </div>
                    </text>))
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between">
                    <div class="m-3">
                    </div>
                    <div>
                        @(Html.DevExtreme().Button()
                        .Text("Search")
                        .Width(230)
                        .Height(48)
                        .ID("btn-search")
                        .Template(@<text>
                                    @(Html.DevExtreme().LoadIndicator()
                     .ID("btn-search-indicator")
                  .ElementAttr("class", "btn-indicator")
                     .Visible(false)
                                    )
                                    <span class="dx-button-text"><%= text %></span>
                        </text>).OnClick("loadReportClick"))
                    </div>
                    <div>
                        @(Html.DevExtreme().Button().Icon("chevronup").Width(48).Height(48)
                            .ID("btn-toggle").ElementAttr("class", "button-icon").OnClick("toggleCriteria"))
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="layout-body">
        @(Html.DevExtreme().ScrollView()
        .OnScroll("scrollViewOnScroll")
        .ScrollByContent(true)
        .ScrollByThumb(true)
        .Direction(ScrollDirection.Both)
        .Content(@<text>
                    <div style="margin:0.5em;">
                        <div class="text-center" style="margin:0.5em;" id="reportHeader"></div>
                        <div class="card card-space-bottom">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col">
                                        <b>Summary Sale</b>
                                    </div>
                                    <div class="col-3 float-right">
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="productSale"></div><br />
                                <div id="productSalePieContainer" style="margin-left:auto; margin-right:auto; margin-bottom:1em;" class="collapse">
                                    @(Html.DevExtreme().PieChart()
                        .ID("productSalePie")
                        .Palette(VizPalette.Bright)
                        .Legend(l => l.Visible(false))
                        .ResolveLabelOverlapping(PieChartResolveLabelOverlapping.Shift)
                        .Series(s =>
                        s.Add()
                    .ArgumentField("ProductCatName")
                    .ValueField("Percentage")
                    .Label(l => l
                            .Visible(true)
                            .Font(f => f.Size(10))
                            .Connector(c => c
                                .Visible(true)
                                .Width(0.5)
                            )
                            .Position(PieChartLabelPosition.Columns)
                            .CustomizeText("getPieChartLabel")))
                        .Title(t => t.Text("Item Sales").Font(f => f.Size(20)))
                                    )
                                </div>
                                <div id="promotion"></div><br />
                                <div id="stat"></div><br />
                                <div id="saleMode"></div>
                            </div>
                        </div>
                        <div class="card card-space-bottom">
                            <b class="card-header">Tender</b><div class="card-body" id="tender">
                            </div>
                        </div>
                        <div class="card card-space-bottom">
                            <b class="card-header">Audit</b><div class="card-body" id="audit">
                            </div>
                        </div>
                    </div>
        </text>))
    </div>
</div>
<script type="text/javascript">
    var lastScrollOffset = 0;
    var isScrollUp = false;
    var isCriteriaShow = true;
    var summaryDone = false;
    var tenderDone = false;
    var auditDone = false;
    var api = '@Url.Content("~/api/report/")';
    var staffId = JSON.parse(localStorage.getItem('staff')).StaffID;

    var shopDataSource = new DevExpress.data.CustomStore({
        loadMode: "raw",
        load: function(loadOptions) {
            return $.getJSON(api + "shopdata?staffId=" + staffId);
        },
        onLoaded: function (result) {
            if (result.length == 1)
                $("#slShop").dxSelectBox("instance").option("value", result[0].shopId);
        }
    });

    function init() {
        $('#criteria').on('hide.bs.collapse', function () {
            isCriteriaShow = false;
            $("#btn-toggle").dxButton("instance").option("icon", "chevrondown");
        })
        $('#criteria').on('show.bs.collapse', function () {
            isCriteriaShow = true;
            $("#btn-toggle").dxButton("instance").option("icon", "chevronup");
        })

        $('#criteria').collapse('show');

        $('#slShop').dxSelectBox({
            dataSource: shopDataSource
        });

        try {
            let savedCriteria = JSON.parse(sessionStorage.getItem("criteria"));

            let slShop = $("#slShop").dxSelectBox('instance');

            slShop.option('value', savedCriteria.shopIds);
            $("#fromDate").dxDateBox('instance').option('value', moment(savedCriteria.fromDate));
            $("#toDate").dxDateBox('instance').option('value', moment(savedCriteria.toDate));
        } catch (e) {
        }

        shopDataSource.load().done(function () {
            loadReport(loadReportCallback);
        });
    }

    function toggleCriteria() {
        if (isCriteriaShow)
            $('#criteria').collapse('hide');
        else
            $('#criteria').collapse('show');
    }

    function getPieChartLabel(arg) {
        return arg.argumentText + "<br />(" + arg.valueText + "%)";
    }

    function scrollViewOnScroll(obj) {

        var scrollOffset = obj.scrollOffset.top;

        if (scrollOffset > lastScrollOffset)
            isScrollUp = true;
        else if (scrollOffset < lastScrollOffset)
            isScrollUp = false;

        if (isScrollUp) {
            if (isCriteriaShow)
                $('#criteria').collapse('hide');
        }
        if (obj.reachedTop) {
            $('#criteria').collapse('show');
        }
        lastScrollOffset = scrollOffset;
    }

    function loadReport(loadCallback) {
        let slShop = $("#slShop").dxSelectBox('instance');
        let shopIds = slShop.option('value');
        let shopName = '';
        try {
            shopName = slShop.option('selectedItem').shopName;
        } catch (e) {}
        let fromDate = $("#fromDate").dxDateBox('instance').option('value');
        let toDate = $("#toDate").dxDateBox('instance').option('value');
        let param = '?shopIds=' + shopIds + '&startDate=' + fromDate.toISOString() + '&endDate=' + toDate.toISOString();

        sessionStorage.setItem("criteria", JSON.stringify({
            "shopIds": shopIds,
            "shopName": shopName,
            "fromDate": fromDate,
            "toDate": toDate
        }));

        $("#reportHeader").html("<b>" + shopName  + "</b></br>" + moment(fromDate).format("D/M/Y") + " - " + moment(toDate).format("D/M/Y"));

        $("#btn-search-indicator").dxLoadIndicator("option", "visible", true);
        $("#btn-search").dxButton("option", "disabled", true);

        $.getJSON('@Url.Content("~/api/report/summary")' + param, function (result) {
            var data = result.data;
            $("#productSale").html(data.saleByGroupHtml);
            $("#promotion").html(data.promoDataHtml);
            $("#stat").html(data.statDataHtml);
            var productSalePie = $("#productSalePie").dxPieChart("instance");
            if (data.productSaleChartData.length > 0) {
                productSalePie.option("dataSource", data.productSaleChartData);
                $('#productSalePieContainer').collapse('show');
            } else {
                $('#productSalePieContainer').collapse('hide');
            }
        }).fail(function (err) {
            $("#summary").html("Not available now ");
        }).always(function () {
            loadCallback('summary');
        });

        $.getJSON('@Url.Content("~/api/report/tender")' + param, function (result) {
            $("#tender").html(result.data);
        }).fail(function (err) {
            $("#tender").html("Not available now");
        }).always(function () {
            loadCallback('tender');
        });

        $.getJSON('@Url.Content("~/api/report/audit")' + param, function (result) {
            $("#audit").html(result.data);
        }).fail(function (err) {
            $("#audit").html("Not available now");
        }).always(function () {
            loadCallback('audit');
        });
    }

    function loadReportCallback (opt) {
        if (opt === 'summary')
            summaryDone = true;
        if (opt === 'tender')
            tenderDone = true;
        if (opt === 'audit')
            auditDone = true;

        if (summaryDone && tenderDone && auditDone) {
            $("#btn-search-indicator").dxLoadIndicator("option", "visible", false);
            $("#btn-search").dxButton("option", "disabled", false);
        }
    }

    function resetLoadStatus() {
        summaryDone = false;
        tenderDone = false;
        auditDone = false;
    }

    function loadReportClick() {
        resetLoadStatus();
        loadReport(loadReportCallback);
    }

    function periodGroupItemClick(e) {
        let period = e.itemData.period;
        let year = moment().year();
        let month = moment().month();
        let day = moment().date();
        let daysInMonth = moment().daysInMonth();
        let lastMonth = moment().add(-1, 'month');
        let today = moment();
        let yesterday = moment().add(-1, 'days');
        switch (period) {
            case "last_month":
                $("#fromDate").dxDateBox("instance").option("value", moment(lastMonth).set('date', 1));
                $("#toDate").dxDateBox("instance").option("value", new Date(lastMonth.year(), lastMonth.month(), lastMonth.daysInMonth()));
                break;
            case "this_month":
                $("#fromDate").dxDateBox("instance").option("value", new Date(year, month, 1));
                $("#toDate").dxDateBox("instance").option("value", new Date(year, month, day));
                break;
            case "yesterday":
                $("#fromDate").dxDateBox("instance").option("value", yesterday);
                $("#toDate").dxDateBox("instance").option("value", yesterday);
                break;
            case "today":
                $("#fromDate").dxDateBox("instance").option("value", today);
                $("#toDate").dxDateBox("instance").option("value", today);
                break;
        }
    }

    function logoutClick() {
        var myDialog = DevExpress.ui.dialog.custom({
            title: "Logout",
            messageHtml: "<b>Do you want to logout?</b>",
            buttons: [{
                text: "No",
                onClick: function (e) {
                    return false;
                }
            },{
                    text: "Yes",
                    onClick: function (e) {
                        return true;
                    }
                }
            ]
        });
        myDialog.show().done(function (dialogResult) {
            if (dialogResult) {
                sessionStorage.clear();
                localStorage.clear();
                location.href = '@Url.Content("~/Login")';
            }
        });
        
    }

    $(function () {
        init();
    });
</script>