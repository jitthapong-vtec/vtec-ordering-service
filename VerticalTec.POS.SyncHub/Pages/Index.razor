@page "/"
@using VerticalTec.POS.LiveUpdate
@using Microsoft.AspNetCore.SignalR.Client
@using VerticalTec.POS.Database

@inject IDatabase DbContext
@inject LiveUpdateDbContext LiveupdateContext
@inject NavigationManager NavigationManager

<div class="form-row">
    <div class="form-group col-md-6">
        <h3>Client</h3>
    </div>
</div>

@if (clients == null)
{
<p><em>Loading...</em></p>
}
else
{
@*<DxDataGrid Data="@clients" ShowFilterRow="false" PageSize="10" ShowPager="true">
    <DxDataGridColumn Caption="Online" TextAlignment="@DataGridTextAlign.Center">
        <DisplayTemplate>
            @{
                var client = (context as VersionInfo);
                <span style="width:24px;height:24px;border-radius:50%;display:inline-block;" class="@(client.IsOnline ? "bg-success" : "bg-danger")"></span>
            }
        </DisplayTemplate>
    </DxDataGridColumn>
    <DxDataGridColumn Caption="Computer Name">
        <DisplayTemplate>
            @{
                var client = (context as VersionInfo);
                <h4>
                    @client.ComputerName
                </h4>
                <h6>
                    @client.ShopName
                </h6>
            }
        </DisplayTemplate>
    </DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(VersionInfo.ProgramVersion)" Caption="Current Version" />
    <DxDataGridColumn Field="@nameof(VersionInfo.ProcessMessage)" Caption="Last status" />
</DxDataGrid>*@
<table class="table" width="100%">
    <colgroup>
        <col style="width:10%">
        <col style="width:20%">
        <col style="width:20%">
        <col style="width:30%">
        <col style="width:20%">
    </colgroup>
    <thead>
        <tr>
            <th>Online</th>
            <th>Computer name</th>
            <th>Current Version</th>
            <th>Last Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var client in clients)
            {
        <tr>
            <td>
                <span style="width:24px;height:24px;border-radius:50%;display:inline-block;" class="@(client.IsOnline ? "bg-success" : "bg-danger")"></span>
            </td>
            <td>
                <h4>
                    @client.ComputerName
                </h4>
                <h6>
                    @client.ShopName
                </h6>
            </td>
            <td>@client.ProgramVersion</td>
            <td>
                <div class="col" style="width:300px; overflow:auto;">@client.ProcessMessage</div>
            </td>
            <td>
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" disabled="@(client.CanExecute == false)" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Action
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" href="#" @onclick="@(async() => await GetClientInfo(client))">Get version info</a>
                        <a class="dropdown-item" href="#" @onclick="@(async() => await SendBackupCommand(client))">Backup</a>
                        <a class="dropdown-item" href="#" @onclick="@(async() => await SendDownloadFileCommand(client))">Download file</a>
                    </div>
                </div>
            </td>
        </tr>
            }
    </tbody>
</table>
}

@code{

    HubConnection connection;

    List<VersionInfo> clients;

    protected override async Task OnInitializedAsync()
    {
        await LoadClient();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var url = NavigationManager.BaseUri + "console";
            connection = new HubConnectionBuilder().WithUrl(url)
                .WithAutomaticReconnect()
                .Build();

            connection.On<VersionInfo>("ClientUpdateInfo", ClientUpdateInfo);
            connection.On<string>("ClientDisconnect", ClientDisconnect);
            connection.On<VersionLiveUpdate>("ClientUpdateVersionState", ClientUpdateVersionState);

            while (true)
            {
                try
                {
                    await connection.StartAsync();
                    await connection.InvokeAsync("GetClientInfo", "");
                    break;
                }
                catch
                {
                    await Task.Delay(TimeSpan.FromSeconds(3));
                }
            }
        }
    }

    async Task LoadClient()
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            clients = await LiveupdateContext.GetVersionInfo(conn);
        }
    }

    public Task ClientDisconnect(string connectionId)
    {
        try
        {
            var client = clients.Where(c => c.ConnectionId == connectionId).FirstOrDefault();
            client.IsOnline = false;
            clients[clients.IndexOf(client)] = client;
            StateHasChanged();
        }
        catch { }
        return Task.FromResult(true);
    }

    public async Task GetClientInfo(VersionInfo client)
    {
        await connection.InvokeAsync("GetClientInfo", client.ConnectionId);
    }

    public async Task SendDownloadFileCommand(VersionInfo client)
    {
        await connection.InvokeAsync("SendDownloadFileCommand", client.ConnectionId);
        client.CanExecute = false;
        StateHasChanged();
    }

    public async Task SendBackupCommand(VersionInfo client)
    {
        await connection.InvokeAsync("SendBackupCommand", client.ConnectionId);
        client.CanExecute = false;
        StateHasChanged();
    }

    public async Task ClientUpdateInfo(VersionInfo versionInfo)
    {
        try
        {
            var client = clients.Where(c => c.ShopId == versionInfo.ShopId && c.ComputerId == versionInfo.ComputerId).FirstOrDefault();
            clients[clients.IndexOf(client)] = versionInfo;
            StateHasChanged();
        }
        catch
        {
            await LoadClient();
        }
    }

    public async Task ClientUpdateVersionState(VersionLiveUpdate state)
    {
        try
        {
            var client = clients.Where(c => c.ShopId == state.ShopId && c.ComputerId == state.ComputerId).FirstOrDefault();
            client.ProcessMessage = state.MessageLog;
            if (state.CommandStatus == CommandStatus.Finish)
                client.CanExecute = true;
            clients[clients.IndexOf(client)] = client;
            StateHasChanged();
        }
        catch
        {
            await LoadClient();
        }
    }
}