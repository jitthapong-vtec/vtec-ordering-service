@page "/"
@using VerticalTec.POS.LiveUpdate
@using Microsoft.AspNetCore.SignalR.Client
@using VerticalTec.POS.Database

@inject IDatabase DbContext
@inject LiveUpdateDbContext LiveupdateContext
@inject NavigationManager NavigationManager

<h1>Liveupdate Console</h1>

@if (_clients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Online</th>
                <th>Computer name</th>
                <th>Current Version</th>
                <th>Last Status</th>
                @*<th>Action</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var client in _clients)
            {
                <tr>
                    <td>
                        <span style="width:24px;height:24px;border-radius:50%;display:inline-block;" class="@(client.IsOnline ? "bg-success" : "bg-danger")"></span>
                    </td>
                    <td>
                        <h4>
                            @client.ComputerName
                        </h4>
                        <h6>
                            @client.ShopName
                        </h6>
                    </td>
                    <td>@client.ProgramVersion</td>
                    <td>@client.ProcessMessage</td>
                    @*<td>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" disabled="@(client.CanExecute == false)" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Action
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" href="#" @onclick="@(async() => await GetClientInfo(client))">Get version info</a>
                                <a class="dropdown-item" href="#" @onclick="@(async() => await SendBackupCommand(client))">Backup</a>
                                <a class="dropdown-item" href="#" @onclick="@(async() => await SendDownloadFileCommand(client))">Download file</a>
                            </div>
                        </div>
                    </td>*@
                </tr>
            }
        </tbody>
    </table>
}

@code{

    HubConnection _connection;

    List<VersionInfo> _clients;

    protected override async Task OnInitializedAsync()
    {
        await LoadClient();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var url = NavigationManager.BaseUri + "console";
            _connection = new HubConnectionBuilder().WithUrl(url)
                .WithAutomaticReconnect()
                .Build();

            _connection.On<VersionInfo>("ClientUpdateInfo", ClientUpdateInfo);
            _connection.On<string>("ClientDisconnect", ClientDisconnect);
            _connection.On<VersionLiveUpdate>("ClientUpdateVersionState", ClientUpdateVersionState);

            while (true)
            {
                try
                {
                    await _connection.StartAsync();
                    await _connection.InvokeAsync("GetClientInfo", "");
                    break;
                }
                catch
                {
                    await Task.Delay(TimeSpan.FromSeconds(3));
                }
            }
        }
    }

    async Task LoadClient()
    {
        using (var conn = await DbContext.ConnectAsync())
        {
            _clients = await LiveupdateContext.GetVersionInfo(conn);
        }
    }

    public Task ClientDisconnect(string connectionId)
    {
        try
        {
            var client = _clients.Where(c => c.ConnectionId == connectionId).FirstOrDefault();
            client.IsOnline = false;
            _clients[_clients.IndexOf(client)] = client;
            StateHasChanged();
        }
        catch { }
        return Task.FromResult(true);
    }

    public async Task GetClientInfo(VersionInfo client)
    {
        await _connection.InvokeAsync("GetClientInfo", client.ConnectionId);
    }

    public async Task SendDownloadFileCommand(VersionInfo client)
    {
        await _connection.InvokeAsync("SendDownloadFileCommand", client.ConnectionId);
        client.CanExecute = false;
        StateHasChanged();
    }

    public async Task SendBackupCommand(VersionInfo client)
    {
        await _connection.InvokeAsync("SendBackupCommand", client.ConnectionId);
        client.CanExecute = false;
        StateHasChanged();
    }

    public async Task ClientUpdateInfo(VersionInfo versionInfo)
    {
        try
        {
            var client = _clients.Where(c => c.ShopId == versionInfo.ShopId && c.ComputerId == versionInfo.ComputerId).FirstOrDefault();
            _clients[_clients.IndexOf(client)] = versionInfo;
            StateHasChanged();
        }
        catch
        {
            await LoadClient();
        }
    }

    public async Task ClientUpdateVersionState(VersionLiveUpdate state)
    {
        try
        {
            var client = _clients.Where(c => c.ShopId == state.ShopId && c.ComputerId == state.ComputerId).FirstOrDefault();
            client.ProcessMessage = state.MessageLog;
            if (state.CommandStatus == CommandStatus.Finish)
                client.CanExecute = true;
            _clients[_clients.IndexOf(client)] = client;
            StateHasChanged();
        }
        catch
        {
            await LoadClient();
        }
    }
}